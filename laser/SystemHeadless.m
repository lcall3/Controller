AmpSat0 = q0(NomV);
Elec0d0 = q0(TermR);                % (Ohms)
Elec0d1 = q0(TermL);                % (H)
Elec0n  = 1;
Elec0d  = [Elec0d1, Elec0d0];
TConst0 = q0(TorqueK);              % (Nm/A)
BackEMF0 = 1 / q0(SpdK);            % (V/(rad/s))
ring_volume = (link_oR^2 - link_iR^2) * pi * link_depth;    % Volume (m^3)
ring_mass   = ring_volume * alum_density;                   % Mass   (kg)
ring_J = (ring_mass / 12) * (3 * (link_iR^2 + link_oR^2) + link_depth^2);
q0_rotor_J = q0(RotJ);          % (kgm^2)
motor_length  = q1(Length);                         % (m)
motor_radius  = q1(OuterDiam) / 2;                  % (m)
motor_volume  = motor_radius^2 * pi * motor_length; % (m^3)
motor_mass    = q1(Weight);                         % (kg)
motor_density = motor_mass / motor_volume;          % (kg/m^3)
q1_extension_volume = link_offset * motor_radius^2 * pi;                 % (m^3)
q1_extended_mass    = motor_mass + (motor_density * q1_extension_volume); % (kg)
q1_extended_length = link_offset + motor_length;                        % (m)
q1_extended_J      = q1_extended_mass * q1_extended_length^2 / 3;       % (kgm^2)
q1_imaginary_mass = motor_density * link_offset * motor_radius^2 * pi;  % (kg)
q1_imaginary_J    = q1_imaginary_mass * link_offset^2 / 3;              % (kgm^2)
q1_J = q1_extended_J - q1_imaginary_J;                                  % (kgm^2)
q1_J = q1_J * 2;
q0_B = q0(NoLoadCurr) * q0(TorqueK) / q0(NoLoadSpd);
q0_B = 2 * q0_B;                                % (Nm/(rad/s))
q0_K = spring_k;                                % (Nm/rad)
J_0 = ring_J + q0_rotor_J + q1_J;               % (kgm^2)
B_0 = q0_B;                                     % ((rad/s)/Nm)  === (kgm^2/s)
K_0 = q0_K;                                     % (Nm/rad)      === (kgm^2/s^2)
Mech0n  = [1, 0];
Mech0d  = [J_0, B_0, K_0];
JntSat0 = Big;
Sens0    = SensV / (SensAng * RadPerDeg);       % (V/rad)
SensSat0 = SensV;                               % (V)
inner_mass = 2 * motor_mass + ring_mass;        % (kg)
inner_fg   = G * inner_mass;                    % (N)
StFric0    = mu_SF * inner_fg;                  % (N)
Amp1n   = Amp0n;
Amp1d   = Amp0d;
AmpSat1 = AmpSat0;
Elec1d0 = q1(TermR);                            % (Ohms)
Elec1d1 = q1(TermL);                            % (H)
Elec1n  = 1;
Elec1d  = [Elec1d1, Elec1d0];
TConst1 = q1(TorqueK);                          % (Nm/A)
BackEMF1 = 1 / q1(SpdK);                        % (V/(rad/s))
q1_rotor_J = q1(RotJ);                 % (kgm^2)
q1_B = q1(NoLoadCurr) * q1(TorqueK) / q1(NoLoadSpd);
J_1 = q1_rotor_J;
B_1 = q1_B;
K_1 = 0;
Mech1n  = [1, 0];
Mech1d  = [J_1, B_1, K_1];
JntSat1 = joint_limit;
Sens1    = SensV / (SensAng * RadPerDeg);       % (V/rad)
SensSat1 = SensV;                               % (V)
StFric1 = 0;
tf_amp0 = tf(Amp0n, Amp0d);
tf_amp1 = tf(Amp1n, Amp1d);
tf_elec0 = tf(Elec0n, Elec0d);
tf_elec1 = tf(Elec1n, Elec1d);
tf_mech0 = tf(Mech0n, Mech0d);
tf_mech1 = tf(Mech1n, Mech1d);
g_q0 = tf_elec0 * TConst0 * tf_mech0;
h_q0 = BackEMF0;
oltf_q0 = tf_amp0 * (g_q0 / (1 + g_q0 * h_q0)) / tf('s'); 
ol_q0 = zpk(minreal(oltf_q0));
g_q1 = tf_elec1 * TConst1 * tf_mech1;
h_q1 = BackEMF1;
oltf_q1 = tf_amp1 * (g_q1 / (1 + g_q1 * h_q1)) / tf('s');
ol_q1 = zpk(minreal(oltf_q1));