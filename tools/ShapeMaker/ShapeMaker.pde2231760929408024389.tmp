int left, right, top, bottom;

// The rise time for the controller end-to-end in milliseconds
final float timeFactor = 10.0;
final float minTimeFactor = 0.3;
final float maxTimeFactor = 2.0;

ArrayList<PVector> verts = new ArrayList<PVector>();
FloatList vertsTime = new FloatList();

void setup() {
    size(1280, 800);
    
    left = width/2 - 300;
    right = left + 600;
    top = height/2 - 300;
    bottom = top + 600;
}

void draw() {
    background(0);
    drawCanvas();
    drawCursor();
    drawVertList();
}

void drawCanvas() {
    rectMode(CENTER);
    noFill();
    stroke(150);
    strokeWeight(1);
    rect(width/2, height/2, 600, 600);
    line(left+300, top, left+300, bottom);
    line(left, top+300, right, top+300);
    fill(255);
    textSize(20);
    text("Canvas", left, top);
}

void drawCursor() {
    if (mouseInCanvas()) {
        noFill();
        strokeWeight(5);
        stroke(255, 0, 0);
        point(mouseX, mouseY);
    }
}

boolean mouseInCanvas() {
    return (mouseX >= left && mouseX <= right && mouseY >= top && mouseY <= bottom);
}

void mouseClicked() {
    if (mouseInCanvas()) {
        
        // Add point to list
        verts.add(new PVector(
            map(mouseX, left, right, -1, 1),
            map(mouseY, top, bottom, 1, -1)
        ));
        
        // Calculate the required time based on a time factor and distance
        if (verts.size() > 1) {
            float distance = verts.get(verts.size() - 1).dist(verts.get(verts.size() - 2));
            float time = map(distance, 0, 2, minTimeFactor * timeFactor, maxTimeFactor * timeFactor);
            vertsTime.append(time);
        }
    }
}

void drawVertList() {
    int x = right + 50;
    text("Vertices", x, top);
    textSize(12);
    for (int i = 0; i < verts.size(); i++) {
        PVector v = verts.get(i);
        text("(" + nf(v.x, 1, 4) + ", " + nf(v.y, 1, 4) + "): " + nf(vertsTime.get(i), 3, 3) + "ms", x, top + (i + 1) * 14);
    }
}